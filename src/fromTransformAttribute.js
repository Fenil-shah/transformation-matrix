import {parse} from './fromTransformAttribute.autogenerated'
import {translate} from './translate'
import {transform} from "./transform";
import {rotate} from "./rotate";
import {fromObject} from "./fromObject";


/**
 * Parse SVG Trasform Attribute http://www.w3.org/TR/SVG/coords.html#TransformAttribute
 * @param transformString string
 * @param generateMatrix boolean
 * @return Object
 */
export function fromTransformAttribute(transformString, generateMatrix = true) {
  let descriptor = parse(transformString)

  let matrix = generateMatrix ? convertDescriptorToMatrix(descriptor) : undefined

  return {descriptor, matrix}
}

function convertDescriptorToMatrix(descriptor) {

  let converter = type => {
    let params = descriptor[type]
    let hasParam = key => params.hasOwnProperty(key)

    switch (type) {
      //TODO support more case

      case 'translate':
        if (hasParam('ty'))
          return translate(params.tx, params.ty)

        return translate(params.tx, params.tx)

      case 'rotate':
        if (hasParam('cx') && hasParam('cy'))
          return transform(translate(-params.cx, -params.cy), rotate(params.angle), rotate(params.cx), rotate(params.cy))

        return rotate(params.angle)

      case 'matrix':
        return fromObject(params)

      default:
        throw new Error('Unsupported descriptor')
    }
  }

  let keys = Object.keys(descriptor)

  return keys.length === 1 ? converter(keys[0]) : keys.map(converter)
}
